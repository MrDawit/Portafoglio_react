{"ast":null,"code":"import { resolveElements } from '../../render/dom/utils/resolve-element.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\n\nfunction createAnimationsFromSequence(sequence, {\n  defaultTransition = {},\n  ...sequenceTransition\n} = {}, scope) {\n  const animationDefinitions = new Map();\n  const sequences = new Map();\n  const elementCache = {};\n  const timeLabels = new Map();\n  let prevTime = 0;\n  let currentTime = 0;\n  let totalDuration = 0;\n  /**\n   * Build the timeline by mapping over the sequence array and converting\n   * the definitions into keyframes and offsets with absolute time values.\n   * These will later get converted into relative offsets in a second pass.\n   */\n\n  for (let i = 0; i < sequence.length; i++) {\n    const segment = sequence[i];\n    /**\n     * If this is a timeline label, mark it and skip the rest of this iteration.\n     */\n\n    if (typeof segment === \"string\") {\n      timeLabels.set(segment, currentTime);\n      continue;\n    } else if (!Array.isArray(segment)) {\n      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n      continue;\n    }\n\n    let [subject, keyframes, transition = {}] = segment;\n    /**\n     * If a relative or absolute time value has been specified we need to resolve\n     * it in relation to the currentTime.\n     */\n\n    if (transition.at !== undefined) {\n      currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n    }\n    /**\n     * Keep track of the maximum duration in this definition. This will be\n     * applied to currentTime once the definition has been parsed.\n     */\n\n\n    let maxDuration = 0;\n\n    const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {\n      const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n      const {\n        duration = defaultTransition.duration || 0.3,\n        ease = defaultTransition.ease || \"easeOut\"\n      } = valueTransition;\n      const delay = typeof valueTransition.delay === \"function\" ? valueTransition.delay(elementIndex, numElements) : valueTransition.delay || 0;\n      const startTime = currentTime + delay;\n      const targetTime = startTime + duration;\n      const {\n        times = defaultOffset(valueKeyframesAsList)\n      } = valueTransition;\n      /**\n       * If there's only one time offset of 0, fill in a second with length 1\n       */\n\n      if (times.length === 1 && times[0] === 0) {\n        times[1] = 1;\n      }\n      /**\n       * Fill out if offset if fewer offsets than keyframes\n       */\n\n\n      const remainder = times.length - valueKeyframesAsList.length;\n      remainder > 0 && fillOffset(times, remainder);\n      /**\n       * If only one value has been set, ie [1], push a null to the start of\n       * the keyframe array. This will let us mark a keyframe at this point\n       * that will later be hydrated with the previous value.\n       */\n\n      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);\n      /**\n       * Add keyframes, mapping offsets to absolute time.\n       */\n\n      addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n      maxDuration = Math.max(delay + duration, maxDuration);\n      totalDuration = Math.max(targetTime, totalDuration);\n    };\n\n    if (isMotionValue(subject)) {\n      const subjectSequence = getSubjectSequence(subject, sequences);\n      resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n    } else {\n      /**\n       * Find all the elements specified in the definition and parse value\n       * keyframes from their timeline definitions.\n       */\n      const elements = resolveElements(subject, scope, elementCache);\n      const numElements = elements.length;\n      /**\n       * For every element in this segment, process the defined values.\n       */\n\n      for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n        /**\n         * Cast necessary, but we know these are of this type\n         */\n        keyframes = keyframes;\n        transition = transition;\n        const element = elements[elementIndex];\n        const subjectSequence = getSubjectSequence(element, sequences);\n\n        for (const key in keyframes) {\n          resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);\n        }\n      }\n\n      prevTime = currentTime;\n      currentTime += maxDuration;\n    }\n  }\n  /**\n   * For every element and value combination create a new animation.\n   */\n\n\n  sequences.forEach((valueSequences, element) => {\n    for (const key in valueSequences) {\n      const valueSequence = valueSequences[key];\n      /**\n       * Arrange all the keyframes in ascending time order.\n       */\n\n      valueSequence.sort(compareByTime);\n      const keyframes = [];\n      const valueOffset = [];\n      const valueEasing = [];\n      /**\n       * For each keyframe, translate absolute times into\n       * relative offsets based on the total duration of the timeline.\n       */\n\n      for (let i = 0; i < valueSequence.length; i++) {\n        const {\n          at,\n          value,\n          easing\n        } = valueSequence[i];\n        keyframes.push(value);\n        valueOffset.push(progress(0, totalDuration, at));\n        valueEasing.push(easing || \"easeOut\");\n      }\n      /**\n       * If the first keyframe doesn't land on offset: 0\n       * provide one by duplicating the initial keyframe. This ensures\n       * it snaps to the first keyframe when the animation starts.\n       */\n\n\n      if (valueOffset[0] !== 0) {\n        valueOffset.unshift(0);\n        keyframes.unshift(keyframes[0]);\n        valueEasing.unshift(\"linear\");\n      }\n      /**\n       * If the last keyframe doesn't land on offset: 1\n       * provide one with a null wildcard value. This will ensure it\n       * stays static until the end of the animation.\n       */\n\n\n      if (valueOffset[valueOffset.length - 1] !== 1) {\n        valueOffset.push(1);\n        keyframes.push(null);\n      }\n\n      if (!animationDefinitions.has(element)) {\n        animationDefinitions.set(element, {\n          keyframes: {},\n          transition: {}\n        });\n      }\n\n      const definition = animationDefinitions.get(element);\n      definition.keyframes[key] = keyframes;\n      definition.transition[key] = { ...defaultTransition,\n        duration: totalDuration,\n        ease: valueEasing,\n        times: valueOffset,\n        ...sequenceTransition\n      };\n    }\n  });\n  return animationDefinitions;\n}\n\nfunction getSubjectSequence(subject, sequences) {\n  !sequences.has(subject) && sequences.set(subject, {});\n  return sequences.get(subject);\n}\n\nfunction getValueSequence(name, sequences) {\n  if (!sequences[name]) sequences[name] = [];\n  return sequences[name];\n}\n\nfunction keyframesAsList(keyframes) {\n  return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\n\nfunction getValueTransition(transition, key) {\n  return transition[key] ? { ...transition,\n    ...transition[key]\n  } : { ...transition\n  };\n}\n\nexport { createAnimationsFromSequence, getValueTransition };","map":{"version":3,"sources":["C:/Users/Kobe/Desktop/laptop with tape/Documents/GITHUB/GITHUB/Portafoglio_react/client/node_modules/framer-motion/dist/es/animation/sequence/create.mjs"],"names":["resolveElements","defaultOffset","fillOffset","progress","isMotionValue","calcNextTime","addKeyframes","compareByTime","createAnimationsFromSequence","sequence","defaultTransition","sequenceTransition","scope","animationDefinitions","Map","sequences","elementCache","timeLabels","prevTime","currentTime","totalDuration","i","length","segment","set","Array","isArray","name","at","subject","keyframes","transition","undefined","maxDuration","resolveValueSequence","valueKeyframes","valueTransition","valueSequence","elementIndex","numElements","valueKeyframesAsList","keyframesAsList","duration","ease","delay","startTime","targetTime","times","remainder","unshift","Math","max","subjectSequence","getSubjectSequence","getValueSequence","elements","element","key","getValueTransition","forEach","valueSequences","sort","valueOffset","valueEasing","value","easing","push","has","definition","get"],"mappings":"AAAA,SAASA,eAAT,QAAgC,4CAAhC;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,aAAT,QAA8B,uCAA9B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAEA,SAASC,4BAAT,CAAsCC,QAAtC,EAAgD;AAAEC,EAAAA,iBAAiB,GAAG,EAAtB;AAA0B,KAAGC;AAA7B,IAAoD,EAApG,EAAwGC,KAAxG,EAA+G;AAC3G,QAAMC,oBAAoB,GAAG,IAAIC,GAAJ,EAA7B;AACA,QAAMC,SAAS,GAAG,IAAID,GAAJ,EAAlB;AACA,QAAME,YAAY,GAAG,EAArB;AACA,QAAMC,UAAU,GAAG,IAAIH,GAAJ,EAAnB;AACA,MAAII,QAAQ,GAAG,CAAf;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA;AACJ;AACA;AACA;AACA;;AACI,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,QAAQ,CAACa,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAME,OAAO,GAAGd,QAAQ,CAACY,CAAD,CAAxB;AACA;AACR;AACA;;AACQ,QAAI,OAAOE,OAAP,KAAmB,QAAvB,EAAiC;AAC7BN,MAAAA,UAAU,CAACO,GAAX,CAAeD,OAAf,EAAwBJ,WAAxB;AACA;AACH,KAHD,MAIK,IAAI,CAACM,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAL,EAA6B;AAC9BN,MAAAA,UAAU,CAACO,GAAX,CAAeD,OAAO,CAACI,IAAvB,EAA6BtB,YAAY,CAACc,WAAD,EAAcI,OAAO,CAACK,EAAtB,EAA0BV,QAA1B,EAAoCD,UAApC,CAAzC;AACA;AACH;;AACD,QAAI,CAACY,OAAD,EAAUC,SAAV,EAAqBC,UAAU,GAAG,EAAlC,IAAwCR,OAA5C;AACA;AACR;AACA;AACA;;AACQ,QAAIQ,UAAU,CAACH,EAAX,KAAkBI,SAAtB,EAAiC;AAC7Bb,MAAAA,WAAW,GAAGd,YAAY,CAACc,WAAD,EAAcY,UAAU,CAACH,EAAzB,EAA6BV,QAA7B,EAAuCD,UAAvC,CAA1B;AACH;AACD;AACR;AACA;AACA;;;AACQ,QAAIgB,WAAW,GAAG,CAAlB;;AACA,UAAMC,oBAAoB,GAAG,CAACC,cAAD,EAAiBC,eAAjB,EAAkCC,aAAlC,EAAiDC,YAAY,GAAG,CAAhE,EAAmEC,WAAW,GAAG,CAAjF,KAAuF;AAChH,YAAMC,oBAAoB,GAAGC,eAAe,CAACN,cAAD,CAA5C;AACA,YAAM;AAAEO,QAAAA,QAAQ,GAAGhC,iBAAiB,CAACgC,QAAlB,IAA8B,GAA3C;AAAgDC,QAAAA,IAAI,GAAGjC,iBAAiB,CAACiC,IAAlB,IAA0B;AAAjF,UAAgGP,eAAtG;AACA,YAAMQ,KAAK,GAAG,OAAOR,eAAe,CAACQ,KAAvB,KAAiC,UAAjC,GACRR,eAAe,CAACQ,KAAhB,CAAsBN,YAAtB,EAAoCC,WAApC,CADQ,GAERH,eAAe,CAACQ,KAAhB,IAAyB,CAF/B;AAGA,YAAMC,SAAS,GAAG1B,WAAW,GAAGyB,KAAhC;AACA,YAAME,UAAU,GAAGD,SAAS,GAAGH,QAA/B;AACA,YAAM;AAAEK,QAAAA,KAAK,GAAG9C,aAAa,CAACuC,oBAAD;AAAvB,UAAkDJ,eAAxD;AACA;AACZ;AACA;;AACY,UAAIW,KAAK,CAACzB,MAAN,KAAiB,CAAjB,IAAsByB,KAAK,CAAC,CAAD,CAAL,KAAa,CAAvC,EAA0C;AACtCA,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACH;AACD;AACZ;AACA;;;AACY,YAAMC,SAAS,GAAGD,KAAK,CAACzB,MAAN,GAAekB,oBAAoB,CAAClB,MAAtD;AACA0B,MAAAA,SAAS,GAAG,CAAZ,IAAiB9C,UAAU,CAAC6C,KAAD,EAAQC,SAAR,CAA3B;AACA;AACZ;AACA;AACA;AACA;;AACYR,MAAAA,oBAAoB,CAAClB,MAArB,KAAgC,CAAhC,IACIkB,oBAAoB,CAACS,OAArB,CAA6B,IAA7B,CADJ;AAEA;AACZ;AACA;;AACY3C,MAAAA,YAAY,CAAC+B,aAAD,EAAgBG,oBAAhB,EAAsCG,IAAtC,EAA4CI,KAA5C,EAAmDF,SAAnD,EAA8DC,UAA9D,CAAZ;AACAb,MAAAA,WAAW,GAAGiB,IAAI,CAACC,GAAL,CAASP,KAAK,GAAGF,QAAjB,EAA2BT,WAA3B,CAAd;AACAb,MAAAA,aAAa,GAAG8B,IAAI,CAACC,GAAL,CAASL,UAAT,EAAqB1B,aAArB,CAAhB;AACH,KAjCD;;AAkCA,QAAIhB,aAAa,CAACyB,OAAD,CAAjB,EAA4B;AACxB,YAAMuB,eAAe,GAAGC,kBAAkB,CAACxB,OAAD,EAAUd,SAAV,CAA1C;AACAmB,MAAAA,oBAAoB,CAACJ,SAAD,EAAYC,UAAZ,EAAwBuB,gBAAgB,CAAC,SAAD,EAAYF,eAAZ,CAAxC,CAApB;AACH,KAHD,MAIK;AACD;AACZ;AACA;AACA;AACY,YAAMG,QAAQ,GAAGvD,eAAe,CAAC6B,OAAD,EAAUjB,KAAV,EAAiBI,YAAjB,CAAhC;AACA,YAAMuB,WAAW,GAAGgB,QAAQ,CAACjC,MAA7B;AACA;AACZ;AACA;;AACY,WAAK,IAAIgB,YAAY,GAAG,CAAxB,EAA2BA,YAAY,GAAGC,WAA1C,EAAuDD,YAAY,EAAnE,EAAuE;AACnE;AAChB;AACA;AACgBR,QAAAA,SAAS,GAAGA,SAAZ;AACAC,QAAAA,UAAU,GAAGA,UAAb;AACA,cAAMyB,OAAO,GAAGD,QAAQ,CAACjB,YAAD,CAAxB;AACA,cAAMc,eAAe,GAAGC,kBAAkB,CAACG,OAAD,EAAUzC,SAAV,CAA1C;;AACA,aAAK,MAAM0C,GAAX,IAAkB3B,SAAlB,EAA6B;AACzBI,UAAAA,oBAAoB,CAACJ,SAAS,CAAC2B,GAAD,CAAV,EAAiBC,kBAAkB,CAAC3B,UAAD,EAAa0B,GAAb,CAAnC,EAAsDH,gBAAgB,CAACG,GAAD,EAAML,eAAN,CAAtE,EAA8Fd,YAA9F,EAA4GC,WAA5G,CAApB;AACH;AACJ;;AACDrB,MAAAA,QAAQ,GAAGC,WAAX;AACAA,MAAAA,WAAW,IAAIc,WAAf;AACH;AACJ;AACD;AACJ;AACA;;;AACIlB,EAAAA,SAAS,CAAC4C,OAAV,CAAkB,CAACC,cAAD,EAAiBJ,OAAjB,KAA6B;AAC3C,SAAK,MAAMC,GAAX,IAAkBG,cAAlB,EAAkC;AAC9B,YAAMvB,aAAa,GAAGuB,cAAc,CAACH,GAAD,CAApC;AACA;AACZ;AACA;;AACYpB,MAAAA,aAAa,CAACwB,IAAd,CAAmBtD,aAAnB;AACA,YAAMuB,SAAS,GAAG,EAAlB;AACA,YAAMgC,WAAW,GAAG,EAApB;AACA,YAAMC,WAAW,GAAG,EAApB;AACA;AACZ;AACA;AACA;;AACY,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,aAAa,CAACf,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,cAAM;AAAEO,UAAAA,EAAF;AAAMoC,UAAAA,KAAN;AAAaC,UAAAA;AAAb,YAAwB5B,aAAa,CAAChB,CAAD,CAA3C;AACAS,QAAAA,SAAS,CAACoC,IAAV,CAAeF,KAAf;AACAF,QAAAA,WAAW,CAACI,IAAZ,CAAiB/D,QAAQ,CAAC,CAAD,EAAIiB,aAAJ,EAAmBQ,EAAnB,CAAzB;AACAmC,QAAAA,WAAW,CAACG,IAAZ,CAAiBD,MAAM,IAAI,SAA3B;AACH;AACD;AACZ;AACA;AACA;AACA;;;AACY,UAAIH,WAAW,CAAC,CAAD,CAAX,KAAmB,CAAvB,EAA0B;AACtBA,QAAAA,WAAW,CAACb,OAAZ,CAAoB,CAApB;AACAnB,QAAAA,SAAS,CAACmB,OAAV,CAAkBnB,SAAS,CAAC,CAAD,CAA3B;AACAiC,QAAAA,WAAW,CAACd,OAAZ,CAAoB,QAApB;AACH;AACD;AACZ;AACA;AACA;AACA;;;AACY,UAAIa,WAAW,CAACA,WAAW,CAACxC,MAAZ,GAAqB,CAAtB,CAAX,KAAwC,CAA5C,EAA+C;AAC3CwC,QAAAA,WAAW,CAACI,IAAZ,CAAiB,CAAjB;AACApC,QAAAA,SAAS,CAACoC,IAAV,CAAe,IAAf;AACH;;AACD,UAAI,CAACrD,oBAAoB,CAACsD,GAArB,CAAyBX,OAAzB,CAAL,EAAwC;AACpC3C,QAAAA,oBAAoB,CAACW,GAArB,CAAyBgC,OAAzB,EAAkC;AAC9B1B,UAAAA,SAAS,EAAE,EADmB;AAE9BC,UAAAA,UAAU,EAAE;AAFkB,SAAlC;AAIH;;AACD,YAAMqC,UAAU,GAAGvD,oBAAoB,CAACwD,GAArB,CAAyBb,OAAzB,CAAnB;AACAY,MAAAA,UAAU,CAACtC,SAAX,CAAqB2B,GAArB,IAA4B3B,SAA5B;AACAsC,MAAAA,UAAU,CAACrC,UAAX,CAAsB0B,GAAtB,IAA6B,EACzB,GAAG/C,iBADsB;AAEzBgC,QAAAA,QAAQ,EAAEtB,aAFe;AAGzBuB,QAAAA,IAAI,EAAEoB,WAHmB;AAIzBhB,QAAAA,KAAK,EAAEe,WAJkB;AAKzB,WAAGnD;AALsB,OAA7B;AAOH;AACJ,GAvDD;AAwDA,SAAOE,oBAAP;AACH;;AACD,SAASwC,kBAAT,CAA4BxB,OAA5B,EAAqCd,SAArC,EAAgD;AAC5C,GAACA,SAAS,CAACoD,GAAV,CAActC,OAAd,CAAD,IAA2Bd,SAAS,CAACS,GAAV,CAAcK,OAAd,EAAuB,EAAvB,CAA3B;AACA,SAAOd,SAAS,CAACsD,GAAV,CAAcxC,OAAd,CAAP;AACH;;AACD,SAASyB,gBAAT,CAA0B3B,IAA1B,EAAgCZ,SAAhC,EAA2C;AACvC,MAAI,CAACA,SAAS,CAACY,IAAD,CAAd,EACIZ,SAAS,CAACY,IAAD,CAAT,GAAkB,EAAlB;AACJ,SAAOZ,SAAS,CAACY,IAAD,CAAhB;AACH;;AACD,SAASc,eAAT,CAAyBX,SAAzB,EAAoC;AAChC,SAAOL,KAAK,CAACC,OAAN,CAAcI,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAA9C;AACH;;AACD,SAAS4B,kBAAT,CAA4B3B,UAA5B,EAAwC0B,GAAxC,EAA6C;AACzC,SAAO1B,UAAU,CAAC0B,GAAD,CAAV,GACD,EAAE,GAAG1B,UAAL;AAAiB,OAAGA,UAAU,CAAC0B,GAAD;AAA9B,GADC,GAED,EAAE,GAAG1B;AAAL,GAFN;AAGH;;AAED,SAASvB,4BAAT,EAAuCkD,kBAAvC","sourcesContent":["import { resolveElements } from '../../render/dom/utils/resolve-element.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\n\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope) {\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < sequence.length; i++) {\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { duration = defaultTransition.duration || 0.3, ease = defaultTransition.ease || \"easeOut\", } = valueTransition;\n            const delay = typeof valueTransition.delay === \"function\"\n                ? valueTransition.delay(elementIndex, numElements)\n                : valueTransition.delay || 0;\n            const startTime = currentTime + delay;\n            const targetTime = startTime + duration;\n            const { times = defaultOffset(valueKeyframesAsList) } = valueTransition;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */\n            if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */\n            const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */\n            valueKeyframesAsList.length === 1 &&\n                valueKeyframesAsList.unshift(null);\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */\n            addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(delay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        }\n        else {\n            /**\n             * Find all the elements specified in the definition and parse value\n             * keyframes from their timeline definitions.\n             */\n            const elements = resolveElements(subject, scope, elementCache);\n            const numElements = elements.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */\n            for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */\n                keyframes = keyframes;\n                transition = transition;\n                const element = elements[elementIndex];\n                const subjectSequence = getSubjectSequence(element, sequences);\n                for (const key in keyframes) {\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);\n                }\n            }\n            prevTime = currentTime;\n            currentTime += maxDuration;\n        }\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    sequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(\"linear\");\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {},\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition,\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n    return transition[key]\n        ? { ...transition, ...transition[key] }\n        : { ...transition };\n}\n\nexport { createAnimationsFromSequence, getValueTransition };\n"]},"metadata":{},"sourceType":"module"}